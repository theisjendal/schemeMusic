#lang racket
;; ------------------------------
;; DISCLAIMER; The following method are made by Kurt NÃ¸rmark, Aalborg University
;; ------------------------------

; Assumes lists, and makes associate list.
(define (pair-up key-list value-list)
  (if (or (null? key-list) (null? value-list))
      '()
      (cons
       (cons (car key-list) (car value-list))
       (pair-up (cdr key-list) (cdr value-list)))))

; Curries function f by returning a procedure
(define (curry2 f)
  (lambda(x)
    (lambda(y)
      (f x y))))

(define (curry3 f)
  (lambda(x)
    (lambda(y)
      (lambda(z)
       (f x y z)))))

; Uncurries by returning a function with two arguments
(define (uncurry2 f)
  (lambda (x y)
    ((f x) y)))

(define (uncurry3 f)
  (lambda (x y z)
    (((f x) y) z)))

;; ------------------------------

(define second 960)
(define bpm 100)

(define (get-value key element)
  (cdr (assq key element)))

(define base-notes
  '((C 24) (C# 25) (D 26) (D# 27) (E 28) (F 29) (F# 30) (G 31) (G# 32) (A 33) (A# 34) (B 35)))

(define channels
  '((piano 1) (organ 2) (guitar 3) (violin 4) (flute 5) (trumpet 6) (helicopter 7) (telephone 8)))

(define (note? element)
    (eq? (get-value 'type element) 'note))

(define (pause? element)
  (eq? (assq 'type element) 'pause))

;(define (music-element? element)
;  (eq? (get-value 'type element) 'music-element))

(define (seq-music-element? element)
  (eq? (get-value 'type element) 'seq-music-element))

(define (par-music-element? element)
  (eq? (get-value 'type element) 'par-music-element))

;(define (make-music-element element)
 ; (pair-up '(type element) (list 'music-element element)))

(define (note tone length octave)
  (lambda (starttime)
    (cons (list 'starttime starttime)
          (pair-up '(type tone length octave) (list 'note tone length octave)))))

(define (sequence . elements)
  (lambda (starttime)
    (letrec ((alist (lambda (startt total-length processed head tail)
                      (let* ((e (head startt)) ; set starttime of head element
                             (e-len (get-value 'length e)) ; get length of element
                             (tl (+ e-len total-length)) ; calculate total length of sequence so far
                             (proc (cons e processed))) ; add element to processed
                        (if (null? tail)
                            (cons 'elements (cons 'reverse 'proc))
                            (alist (+ startt e-len) tl proc (car tail) (cdr tail))))))
             (h (car elements))
             (t (cdr elements)))
      (cons (alist starttime 0 '() (car elements) (cdr elements))
            (pair-up '(type starttime) (list 'sequence starttime))))))

; Length is tail recursive as there might be many elements.
(define (calculate-length elements)
  (cond ((null? elements) 0)
        ((list? elements) (calculate-length-helper 1 (cdr elements)))
        (else error "Not a list of elements")))

(define (calculate-length-helper count elements)
  (if (null? elements)
      count
      (calculate-length-helper (+ count 1) (cdr elements))))

;(define (sequence . elements)
;  (let ((length (calculate-length elements))
;        (
